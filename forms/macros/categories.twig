{# Macros for rendering categories #}

{% macro renderCategoryCheckboxes(categories, selectedCategories) %}
    {% import _self as self %}
    <ul>
    {% for category in categories %}
        {% set isChecked = false %}
        {% for selectedCategory in selectedCategories %}
            {% if selectedCategory.id == category.id %}
                {% set isChecked = true %}
            {% endif %}
        {% endfor %}
        <li>
            <input type="checkbox" id="category_{{ category.id }}" name="categories[]" value="{{ category.id }}" {{ isChecked ? 'checked' : '' }}>
            <label for="category_{{ category.id }}">{{ category.title }} {{ category.id }}</label>
            {% if category.children|length > 0 %}
                {{ self.renderCategoryCheckboxes(category.children, selectedCategories) }}
            {% endif %}
        </li>
    {% endfor %}
    </ul>
{% endmacro %}

{% macro renderCategoryList(categories, selectedCategories) %}
    {% import _self as self %}
    <ul class="list-disc ml-6 space-y-2">
    {% for category in categories|sort((a, b) => a.order_cat <=> b.order_cat) %}
        {% if category.meta.listArticles == "false" %}
            {% set isChecked = false %}
            {% for selectedCategory in selectedCategories %}
                {% if selectedCategory.id == category.id %}
                    {% set isChecked = true %}
                {% endif %}
            {% endfor %}
            <li class="ml-5">
                <input type="checkbox" id="category_{{ category.id }}" name="categories[]" value="{{ category.id }}" {{ isChecked ? 'checked' : '' }}>
                <label for="category_{{ category.id }}" data-url="{{ category.url }}" data-id="{{ category.id }}" style="cursor: pointer;" class="no-select">{{ category.title }}</label>
                {% if category.children|length > 0 %}
                    {{ self.renderCategoryList(category.children, selectedCategories) }}
                {% endif %}
            </li>
        {% endif %}
    {% endfor %}
    </ul>
{% endmacro %}

{% macro renderNavigationGroups(categories, selectedCategories) %}
    {% import _self as self %}
    {% set groups = {} %}
    {% for cat in categories %}
        {% if cat.navigation_id is not empty %}
            {% set navId = cat.navigation_id %}
            {% if groups[navId] is not defined %}
                {% set groups = groups | merge({ (navId): [] }) %}
            {% endif %}
            {% set groups = groups | merge({ (navId): groups[navId] | merge([cat]) }) %}
        {% endif %}
    {% endfor %}
    {% for navId, navCats in groups %}
        <div class="mb-2">
            <h6>Navigace {{ navId }}</h6>
            {{ self.renderCategoryList(navCats|sort((a,b) => a.order_cat <=> b.order_cat), selectedCategories) }}
        </div>
    {% endfor %}
{% endmacro %}

